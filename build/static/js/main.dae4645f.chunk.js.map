{"version":3,"sources":["components/cell/Cell.tsx","components/app/App.tsx","index.tsx"],"names":["Cell","type","className","getRandomInt","max","Math","floor","random","App","useState","snakeCells","setSnakeCells","direction","setDirection","snake","setSnake","tick","setTick","foodCell","setFoodCell","gameOver","setGameOver","matrix","useEffect","setInterval","val","document","onkeydown","e","key","length","split","curRow","curCol","nextRow","Number","nextCol","nextHead","randomPosition","col","row","slice","newSnakeCells","forEach","node","i","j","push","ReactDOM","render","StrictMode","getElementById"],"mappings":"8OAIaA,EAAO,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KACrB,OAAO,qBAAKC,UAAS,qBAAgBD,MCDjCE,G,MAAe,SAACC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,MAGlCI,EAAM,WAAO,IAAD,EACaC,mBAAqC,CACvE,OAAO,IAFc,mBAChBC,EADgB,KACJC,EADI,OAIWF,mBAChC,SALqB,mBAIhBG,EAJgB,KAILC,EAJK,OAOGJ,mBAAS,CAAC,MAAO,QAPpB,mBAOhBK,EAPgB,KAOTC,EAPS,OAQCN,mBAAS,GARV,mBAQhBO,EARgB,KAQVC,EARU,OASSR,mBAAS,OATlB,mBAShBS,EATgB,KASNC,EATM,OAUSV,oBAAS,GAVlB,mBAUhBW,EAVgB,KAUNC,EAVM,KAajBC,EAAc,GAEpBC,qBAAU,WACRC,aAAY,WACVP,GAAQ,SAACQ,GAAD,OAASA,EAAM,OACtB,KAEHC,SAASC,UAAY,SAACC,GACN,eAAVA,EAAEC,IACJhB,EAAa,SACM,cAAVe,EAAEC,IACXhB,EAAa,QACM,YAAVe,EAAEC,IACXhB,EAAa,MACM,cAAVe,EAAEC,KACXhB,EAAa,WAGhB,IAEHU,qBAAU,WACR,IAAIH,EAAJ,CADc,MAIWN,EAAMA,EAAMgB,OAAS,GAAGC,MAAM,KAJzC,mBAIPC,EAJO,KAICC,EAJD,KAKVC,EAAUC,OAAOH,GACjBI,EAAUD,OAAOF,GAWrB,GAVkB,OAAdrB,EACFsB,IACuB,SAAdtB,EACTsB,IACuB,UAAdtB,EACTwB,IACuB,SAAdxB,GACTwB,IAGEF,EAAU,GAAKA,GAvCR,IAuC2BE,EAAU,GAAKA,GAtCvC,GAuCZf,GAAY,OADd,CAKA,IAAMgB,EAAQ,UAAMH,EAAN,YAAiBE,GAE/B,GAAIC,IAAanB,EAAU,CACzBH,EAAS,GAAD,mBAAKD,GAAL,CAAYuB,KAGpB,IAFA,IAAIC,EAAiB,MAEbA,GAAgB,CACtB,IAAMC,EAAMpC,EAlDF,IAmDJqC,EAAMrC,EApDL,IAqDFO,EAAW,GAAD,OAAI8B,EAAJ,YAAWD,MACxBD,EAAc,UAAME,EAAN,YAAaD,IAI/BpB,EAAYmB,QACH5B,EAAW2B,GACpBhB,GAAY,GAEZN,EAAS,GAAD,mBAAKD,EAAM2B,MAAM,IAAjB,CAAqBJ,SAE9B,CAACrB,IAEJO,qBAAU,WACR,IAAMmB,EAAqB,GAC3B5B,EAAM6B,SAAQ,SAACC,GACbF,EAAcE,IAAQ,KAExBjC,EAAc+B,KACb,CAAC5B,IAEJ,IAAK,IAAI+B,EAAI,EAAGA,EA1EH,GA0EaA,IAAK,CAE7B,IADA,IAAML,EAAM,GACHM,EAAI,EAAGA,EA3EF,GA2EeA,IAAK,CAChC,IAAI7C,EAAiB,QACf4B,EAAG,UAAMgB,EAAN,YAAWC,GAChBpC,EAAWmB,GAEX5B,EADEmB,EACK,aAEA,QAEAS,IAAQX,IACjBjB,EAAO,QAETuC,EAAIO,KAAK,cAAC,EAAD,CAAM9C,KAAMA,GAAW4B,IAElCP,EAAOyB,KACL,qBAAK7C,UAAU,MAAf,SACGsC,GADuBK,IAK9B,OAAO,qBAAK3C,UAAU,QAAf,SAAwBoB,K,MC9GjC0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,W","file":"static/js/main.dae4645f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nexport type CellType = \"snake\" | \"dead-snake\" | \"food\" | \"empty\";\r\nexport const Cell = ({ type }: { type: CellType }) => {\r\n  return <div className={`cell cell--${type}`} />;\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Cell, CellType } from \"../cell/Cell\";\nimport \"./app.css\";\n\nconst getRandomInt = (max: number) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nexport const App = () => {\n  const [snakeCells, setSnakeCells] = useState<{ [key: string]: boolean }>({\n    \"0:0\": true,\n  });\n  const [direction, setDirection] = useState<\"up\" | \"right\" | \"down\" | \"left\">(\n    \"right\"\n  );\n  const [snake, setSnake] = useState([\"0:0\", \"0:1\"]);\n  const [tick, setTick] = useState(0);\n  const [foodCell, setFoodCell] = useState(\"5:5\");\n  const [gameOver, setGameOver] = useState(false);\n  const rows = 10;\n  const columns = 10;\n  const matrix: any = [];\n\n  useEffect(() => {\n    setInterval(() => {\n      setTick((val) => val + 1);\n    }, 500);\n\n    document.onkeydown = (e: KeyboardEvent) => {\n      if (e.key === \"ArrowRight\") {\n        setDirection(\"right\");\n      } else if (e.key === \"ArrowLeft\") {\n        setDirection(\"left\");\n      } else if (e.key === \"ArrowUp\") {\n        setDirection(\"up\");\n      } else if (e.key === \"ArrowDown\") {\n        setDirection(\"down\");\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (gameOver) {\n      return;\n    }\n    const [curRow, curCol] = snake[snake.length - 1].split(\":\");\n    let nextRow = Number(curRow);\n    let nextCol = Number(curCol);\n    if (direction === \"up\") {\n      nextRow--;\n    } else if (direction === \"down\") {\n      nextRow++;\n    } else if (direction === \"right\") {\n      nextCol++;\n    } else if (direction === \"left\") {\n      nextCol--;\n    }\n\n    if (nextRow < 0 || nextRow >= rows || nextCol < 0 || nextCol >= columns) {\n      setGameOver(true);\n      return;\n    }\n\n    const nextHead = `${nextRow}:${nextCol}`;\n\n    if (nextHead === foodCell) {\n      setSnake([...snake, nextHead]);\n      let randomPosition = null;\n\n      while (!randomPosition) {\n        const col = getRandomInt(columns);\n        const row = getRandomInt(rows);\n        if (!snakeCells[`${row}:${col}`]) {\n          randomPosition = `${row}:${col}`;\n        }\n      }\n\n      setFoodCell(randomPosition);\n    } else if (snakeCells[nextHead]) {\n      setGameOver(true);\n    } else {\n      setSnake([...snake.slice(1), nextHead]);\n    }\n  }, [tick]);\n\n  useEffect(() => {\n    const newSnakeCells: any = {};\n    snake.forEach((node) => {\n      newSnakeCells[node] = true;\n    });\n    setSnakeCells(newSnakeCells);\n  }, [snake]);\n\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < columns; j++) {\n      let type: CellType = \"empty\";\n      const key = `${i}:${j}`;\n      if (snakeCells[key]) {\n        if (gameOver) {\n          type = \"dead-snake\";\n        } else {\n          type = \"snake\";\n        }\n      } else if (key === foodCell) {\n        type = \"food\";\n      }\n      row.push(<Cell type={type} key={key} />);\n    }\n    matrix.push(\n      <div className=\"row\" key={i}>\n        {row}\n      </div>\n    );\n  }\n  return <div className=\"field\">{matrix}</div>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}